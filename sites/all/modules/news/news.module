<?php
function News_menu() {
    $items = array();
    $items['News'] = array(
        'title' => 'The Latest News',
        'page callback' => 'get_news',
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM,
    );
    $items['generate_words'] = array(
        'title' => 'Generate Words',
        'page callback' => 'get_words',
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM
    );
    $items['check_word_frequency'] = array(
        'title' => 'Check Frequency',
        'page callback' => 'check_words',
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM
    );
    return $items;
}

function get_news() {
    $hello = 'hello';
    $curl = curl_init();
    curl_setopt_array($curl, array(
        CURLOPT_RETURNTRANSFER => 1,
        CURLOPT_URL => 'https://newsapi.org/v1/sources',
        CURLOPT_USERAGENT => 'Codular Sample cURL Request'
    ));

    $sources = curl_exec($curl);
    curl_close($curl);
    $sources = json_decode($sources);
    if (isset($sources->sources[0])) {

        $sourceNumber = mt_rand(0, count($sources->sources));
        $source = $sources->sources[$sourceNumber]->id;

        $curl = curl_init();
        // Set some options - we are passing in a useragent too here
        curl_setopt_array($curl, array(
            CURLOPT_RETURNTRANSFER => 1,
            CURLOPT_URL => 'https://newsapi.org/v1/articles?source='.$source.'&sortBy=latest&apiKey=ccd4623de5dd47dd9c48798e310b4e34',
            CURLOPT_USERAGENT => 'Codular Sample cURL Request'
        ));
        // Send the request & save response to $resp
        $articles = curl_exec($curl);
        // Close request to clear up some resources
        curl_close($curl);
        $recent_news = json_decode($articles);
        if (isset($recent_news->articles[0])) {

            $articleNumber = mt_rand(0, count($recent_news->articles));
            $article = $recent_news->articles[0];
            $new_article;
            foreach ($article as $key => $val) {
                if (is_null($val)) {
                    $val = '';
                }
                $val = str_replace("'","`",$val);
                $new_article[$key] = $val;
            }
            $author = $new_article['author'];
            $title = $new_article['title'];
            $description = $new_article['description'];
            $url = $new_article['url'];
            $url_to_image = $new_article['urlToImage'];
            $published_at = $new_article['publishedAt'];

            $exists = db_query("SELECT * FROM news_articles WHERE title = '{$title}'");
            foreach($exists as $exist) {
                if($exist) {
                    return '<h1>'.$exist->title.'</h1><br> <p>'.$exist->description.'</p>';
                }
            }
            global $user;
            $node = new stdClass();
            $node->title = $new_article['title'];
            $node->type = "news_article";
            node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
            $node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
            $node->uid = $user->uid;
            $node->status = 1; //(1 or 0): published or not
            $node->promote = 1; //(1 or 0): promoted to front page
            $node->comment = 0; // 0 = comments disabled, 1 = read only, 2 = read/write

            // Term reference (taxonomy) field
            $node->field_description['und'][0]['value'] = $article->description;
            $node->field_author['und'][0]['value'] = $article->author;
            $node->field_url['und'][0]['value'] = $article->url;
            $node->field_image_url['und'][0]['value'] = $article->urlToImage;
            $node->field_published_at['und'][0]['value'] = $article->publishedAt;
            $node->field_source['und'][0]['value'] = $source;


            $node = node_submit($node); // Prepare node for saving
            node_save($node);
            //drupal_set_message( "Node with nid " . $node->nid . " saved!\n");
            db_query("INSERT INTO news_articles (author,title,description,url,url_to_image,published_at, source) VALUES ('{$author}','{$title}', '{$description}', '{$url}', '{$url_to_image}', '{$published_at}','{$source}');");

            return $title;
        }
    }
    return "couldn't find any news this time";
}

function get_words() {
    $titleWordArray = [];
    $descriptionWordArray = [];
    $hello = 'hello';
    $curl = curl_init();
    curl_setopt_array($curl, array(
        CURLOPT_RETURNTRANSFER => 1,
        CURLOPT_URL => 'https://newsapi.org/v1/sources',
        CURLOPT_USERAGENT => 'Codular Sample cURL Request'
    ));

    $sources = curl_exec($curl);
    curl_close($curl);
    $sources = json_decode($sources);
    if (isset($sources->sources[0])) {

        $sourceNumber = count($sources->sources);
        echo($sourceNumber. '<hr>');
        for ($i=0; $i<$sourceNumber; $i++) {
            $source = $sources->sources[$i]->id;
            echo($source);

            $curl = curl_init();
            // Set some options - we are passing in a useragent too here
            curl_setopt_array($curl, array(
                CURLOPT_RETURNTRANSFER => 1,
                CURLOPT_URL => 'https://newsapi.org/v1/articles?source='.$source.'&sortBy=latest&apiKey=ccd4623de5dd47dd9c48798e310b4e34',
                CURLOPT_USERAGENT => 'Codular Sample cURL Request'
            ));
            // Send the request & save response to $resp
            $articles = curl_exec($curl);
            // Close request to clear up some resources
            curl_close($curl);

            $recent_news = json_decode($articles);
            if ($recent_news->status === 'ok') {

                $articleNumber = count($recent_news->articles);
                for ($j=0;$j<$articleNumber;$j++){
                    $newArticleArray[] = [];
                    foreach ($recent_news->articles[$j] as $key => $val) {
                        if (is_null($val)) {
                            $val = '';
                        }
                        $val = str_replace("'","`",$val);
                        $val = preg_replace('/[^A-Za-z0-9\s]/', '', $val);
                        $val = strtolower($val);

                        if($key === 'title') {
                            $oneWordArray = explode(" ", $val);
                            foreach($oneWordArray as $key => $val){
                                $titleWordArray[] = [$key, $val];
                                db_query("INSERT INTO raw_words (word,position,source) VALUES ('{$val}','{$key}', '1');");
                            }

                        }
                        if($key === 'description') {
                            $oneWordArray = explode(" ", $val);
                            foreach($oneWordArray as $key => $val){
                                $descriptionWordArray[] = [$key, $val];
                                db_query("INSERT INTO raw_words (word,position,source) VALUES ('{$val}','{$key}', '2');");
                            }

                        }
                    }
                }
            }
        }
    }

    return "couldn't find any news this time";

}

function check_words() {
    $words = db_query('SELECT * FROM raw_words');
    $wordArray = [];
    $positionCount = [];
    // // display all words in order of frequency regardless of position
    // foreach ($words as $word) {
    //     if (array_key_exists($word->word, $wordArray)) {
    //         $wordArray[$word->word] += 1;
    //     } else {
    //         $wordArray[$word->word] = 1;
    //     }
    // }

    foreach ($words as $word) {
        if ($word->word === 'trump') {
            if (array_key_exists($word->position, $positionCount)) {
                    $positionCount[$word->position] += 1;
                } else {
                    $positionCount[$word->position] = 1;
                }
        }
    }
    arsort($positionCount);
    echo '<pre>';
    var_dump($positionCount);
    echo '</pre>';
}
